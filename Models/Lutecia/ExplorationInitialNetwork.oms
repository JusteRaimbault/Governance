
/**
*  Exploration of network generation
*/

import java.util.Date
import java.text.SimpleDateFormat

logger.level("FINE")


// Parameters
val nwType=Val[Int]
val nwTypeName=Val[String]
val centerNumber=Val[Double]
val gammaSlimeMould=Val[Double]

val id = Val[Int]
val replication = Val[Int]

// reporters

// sustainibility
val meanAccessibility = Val[Double]
val meanCongestion = Val[Double]

// network shape
val nwRelativeLength = Val[Double]
val nwRelativeSpeed = Val[Double]
val nwRobustness = Val[Double]

// urban form
val moranActives=Val[Double]
val meanDistanceActives=Val[Double]
val slopeActives=Val[Double]
val entropyActives=Val[Double]
val moranEmployments=Val[Double]
val meanDistanceEmployments=Val[Double]
val slopeEmployments=Val[Double]
val entropyEmployments=Val[Double]
// -> given an urban form, network optimization ?
// (only center number varies)

// experiments-luti:setup-experiment-initial-network [networkType centers bioGamma rnd-seed]
val cmds = List(
  "experiments-luti:setup-experiment-initial-network ${nwType} ${centerNumber} ${gammaSlimeMould} ${replication}",
  "network:cache-nw-measures"
)

val model = NetLogo6Task(workDirectory / "model/netlogo6/HEADLESS_Lutecia.nlogo",cmds,embedWorkspace=true) set(
  (inputs,outputs) += (nwType,centerNumber,gammaSlimeMould,replication,id),
  outputs += meanAccessibility mapped "indicators:overall-mean-accessibility",
  outputs += meanCongestion mapped "indicators:mean-congestion",
  outputs += nwRelativeLength mapped "network-indicators:relative-nw-length",
  outputs += nwRelativeSpeed mapped "network-indicators:mean-relative-speed",
  outputs += nwRobustness mapped "network-indicators:geometrical-NRI",
  outputs += moranActives mapped "indicators:morphology:moran-actives",
  outputs += meanDistanceActives mapped "indicators:morphology:mean-distance-actives",
  outputs += slopeActives mapped "indicators:morphology:slope-actives",
  outputs += entropyActives mapped "indicators:morphology:entropy-actives",
  outputs += moranEmployments mapped "indicators:morphology:moran-employments",
  outputs += meanDistanceEmployments mapped "indicators:morphology:mean-distance-employments",
  outputs += slopeEmployments mapped "indicators:morphology:slope-employments",
  outputs += entropyEmployments mapped "indicators:morphology:entropy-employments",
  outputs += nwTypeName mapped "global:initial-nw-random-type"
)



val purpose = "TEST"
//val purpose = "INITIAL_NETWORK"

// output
val indics_hook = AppendToCSVFileHook(workDirectory / "exploration" / ((new SimpleDateFormat("yyyyMMdd_HHmmss")).format(new Date()))+"_"+purpose+".csv") set (
  arraysOnSingleRow := true
)

val env = LocalEnvironment(15)
//val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 4000 megabytes)


val replications =
 Replication (
   //evaluation = (model on env by 20 hook indics_hook),
   evaluation = (model on env hook indics_hook),
   seed = replication,
   replications = 1//100
)

//nwType,centerNumber,gammaSlimeMould,replication,id
val exploration =
  DirectSampling(
    evaluation = replications,
    sampling =
   ((LHS (
      1//500
      ,gammaSlimeMould in Range(0.5,2.5)
    ) withIndex id) x (centerNumber in 2.0 to 6.0 by 1.0) x (nwType in (0 to 2 by 1)) )
  )


exploration
