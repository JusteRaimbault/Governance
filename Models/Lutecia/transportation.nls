
;;;;;;;;;;;;;
;; transportation
;;;;;;;;;;;;;



;;
;  Transportation module of the luti model
;
;  Uses cached shortest paths to compute congestion.
to transportation:transportation
  
  output-print "transportation"
  
  ; compute patch to patch flows through furness algorithm
  transportation:compute-flows
  
  ; use effective paths matrix to compute wardrop ?
  transportation:affectation false
  
  ; update congestion given the affectation
  transportation:update-congestion
  
end


;;
; Furness algo
to transportation:compute-flows
  
  verbose "... flows"
  
  ; initial weights
  let p list:rep (1 / global:#-patches) global:#-patches let q list:rep (1 / global:#-patches) global:#-patches
  ; reinitialize matrix
  set global:flow-matrix matrix:make-constant global:#-patches global:#-patches 0
  
  ; compute (equilibrium ?) weights
  ; how many iterations needed ?
  let n-iter-furness 10
  repeat n-iter-furness [    
    let ptemp p let qtemp q
    set p map [1 / ?] first matrix:to-column-list (matrix:times (matrix:map [exp (- ? * global:lambda-flows)] global:effective-distance-matrix) (matrix:from-column-list (list list:times-element-wise qtemp global:patches-employments-list)))
    set q map [1 / ?] first matrix:to-column-list (matrix:times (matrix:map [exp (- ? * global:lambda-flows)] global:effective-distance-matrix) (matrix:from-column-list (list list:times-element-wise ptemp global:patches-actives-list)))
  ]
  
  ; then set flows as \phi_ij = p_i*q_j*A_i*E_j*exp( - \lambda * effective_distance(i,j) )
  ;   -> Q : here effective dist takes into account network
  
  ; WARNING : BORD EFFECTS : proportion of population that should go 'outside the world' is indeed redistributed to nearest patches,
  ;   causing sometimes highest flows to result of bord effects. -- for that, choose centers not to close from brod of the world ?
  
  set global:flow-matrix matrix:times-element-wise (matrix:times-element-wise (matrix:from-column-list (list:rep (list:times-element-wise p global:patches-actives-list) global:#-patches)) (matrix:from-row-list (list:rep (list:times-element-wise q global:patches-employments-list) global:#-patches))) (matrix:map [exp (- ? * global:lambda-flows)] global:effective-distance-matrix)
    
end


;;
; compute the affectation of user trajectories though iterated wardrop eq determination (?)
;
; Initial flow matrix as argument ? not needed as global var.
to transportation:affectation [affect?]
  
  verbose "... affectation"
  
  ; reinitialize
  ifelse affect? [set global:patches-congestion list:rep 0 (count patches)][set global:patches-congestion list:rep 1 (count patches)]
  
  if affect? [
    ; repeat on all couples of patches, now that flows are known
    
    ;;
    ; TODO - current implementation is for one component network only !!!
    
    
    let p1 0 let p2 0
    repeat global:#-patches [
      set p2 0
      repeat global:#-patches [
     
      if table:has-key? global:nw-access-table (list p1 0) and table:has-key? global:nw-access-table (list p2 0) [
         let a1 table:get global:nw-access-table (list p1 0) let a2 table:get global:nw-access-table (list p2 0)
         
         ; need extended paths here !
	if table:has-key? global:closest-nw-inters a1 and table:has-key? global:closest-nw-inters a2 [
           let i1 (one-of map [first ?] table:get global:closest-nw-inters a1) let i2 (one-of map [first ?] table:get global:closest-nw-inters a2)
            if table:has-key? global:network-shortest-paths (list i1 i2) [ 
             let path table:get global:network-shortest-paths (list i1 i2)
             foreach path [set global:patches-congestion replace-item ? global:patches-congestion (item ? global:patches-congestion + matrix:get global:flow-matrix p1 p2)]
           ]
         ]
       ]


         set p2 p2 + 2
      ]
      set p1 p1 + 1
    ]
  ]
  
end



;;
; update congestion
to transportation:update-congestion
  
  verbose "... travel times update"
  
  ; depends on affectation
  ; update the matrices, including newly computed congestion
  
  update-network-distance-matrix true
  distances:update-effective-matrices
  
  
end



