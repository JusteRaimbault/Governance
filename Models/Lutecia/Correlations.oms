
import java.util.Date
import java.text.SimpleDateFormat

logger.level("FINE")


// Parameters
val lambdaAcc = Val[Double]
val networkSpeed = Val[Double]
val gammaCDA=Val[Double]
val gammaCDE=Val[Double]
val betaDC=Val[Double]
val relocationRate=Val[Double]

val id = Val[Int]
val replication = Val[Int]

// scenarios variables
val scenario=Val[Int]
val nwType=Val[String]
val centerNumber=Val[Double]
val gammaSlimeMould=Val[Double]


// reporters
val accessibilities = Val[Array[Double]]
val deltaActives = Val[Array[Double]]
val employments = Val[Array[Double]]
val unweightedTime=Val[Array[Double]]
val weightedTime=Val[Array[Double]]
val nPatches=Val[Double]

val corAccessDev=Val[Array[Double]]
val corAccessDevMin=Val[Array[Double]]
val corAccessDevMax=Val[Array[Double]]
val corAccessEmployments=Val[Array[Double]]
val corAccessEmploymentsMin=Val[Array[Double]]
val corAccessEmploymentsMax=Val[Array[Double]]
val corAccessWeightedtime=Val[Array[Double]]
val corAccessWeightedtimeMin=Val[Array[Double]]
val corAccessWeightedtimeMax=Val[Array[Double]]
val corAccessUnweightedtime=Val[Array[Double]]
val corAccessUnweightedtimeMin=Val[Array[Double]]
val corAccessUnweightedtimeMax=Val[Array[Double]]
val tw=Val[Array[Double]]
val t0=Val[Array[Double]]


val b=Val[Int]

// experiments-luti:setup-experiment-luti [relocationRate gammaA gammaE betaDC lambdaacc nwspeed scenario finalTime rnd-seed]
val cmds = List(
  "experiments-luti:setup-experiment-luti ${relocationRate} ${gammaCDA} ${gammaCDE} ${betaDC} ${lambdaAcc} ${networkSpeed} ${scenario} 200 ${replication}",
  "experiments-luti:run-experiment-luti"
)

val model = NetLogo5Task(workDirectory / "model/HEADLESS_Lutecia.nlogo",cmds,embedWorkspace=true) set(
  inputs += (relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,scenario,replication,id),
  outputs += (relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,scenario,replication,id),
  netLogoOutputs += ("indicators:patches-alltimes-accessibilities",accessibilities),
  netLogoOutputs += ("indicators:patches-alltimes-delta-actives",deltaActives),
  netLogoOutputs += ("indicators:patches-alltimes-employments",employments),
  netLogoOutputs += ("indicators:patches-alltimes-unweighted-access-time",unweightedTime),
  netLogoOutputs += ("indicators:patches-alltimes-weighted-access-time",weightedTime),
  netLogoOutputs += ("count patches",nPatches)
)


val purpose = "TEST"
//val purpose = "CORRELATIONS"

//val nReplications=50
val nReplications=1

// output
val indics_hook = AppendToCSVFileHook(workDirectory / "exploration" / ((new SimpleDateFormat("yyyyMMdd_HHmmss")).format(new Date()))+"_"+purpose+".csv")
//set (arraysOnSingleRow := true)


val env = LocalEnvironment(4)
//val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 4000 megabytes)


val replications =
 Replication (
   evaluation = model on env,//by 10
   seed = replication,
   replications = nReplications
)


val estimateCorrs = RTask("""
        #ultra dirty rscript
        source("corrs.R")
        #show(c(unlist(access)));show(c(unlist(dactives)));show(c(unlist(employments)))
        #show(length(access));#show(length(access[[1]]))
        rhoaccessdevres = timecorrs(c(unlist(access)),c(unlist(dactives)),n=c(unlist(n))[1],b=b)
        rhoaccessempres = timecorrs(c(unlist(access)),c(unlist(employments)),n=c(unlist(n))[1],b=b)
        rhoaccesswtimeres = timecorrs(c(unlist(access)),c(unlist(weightedtime)),n=c(unlist(n))[1],b=b)
        rhoaccessutimeres = timecorrs(c(unlist(access)),c(unlist(unweightedtime)),n=c(unlist(n))[1],b=b)
        relocationRate=c(unlist(relocationRate))[1];gammaCDA=c(unlist(gammaCDA))[1];gammaCDE=c(unlist(gammaCDE))[1];betaDC=c(unlist(betaDC))[1];lambdaAcc=c(unlist(lambdaAcc))[1];networkSpeed=c(unlist(networkSpeed))[1];
        scenario=c(unlist(scenario))[1];id=c(unlist(id))[1];
        rhoaccessdev=rhoaccessdevres$allrho;rhoaccessdevmin=rhoaccessdevres$rhominus;rhoaccessdevmax=rhoaccessdevres$rhoplus
        rhoaccessemp=rhoaccessempres$allrho;rhoaccessempmin=rhoaccessempres$rhominus;rhoaccessempmax=rhoaccessempres$rhoplus
        rhoaccessweightedtime=rhoaccesswtimeres$allrho;rhoaccessweightedtimemin=rhoaccesswtimeres$rhominus;rhoaccessweightedtimemax=rhoaccesswtimeres$rhoplus
        rhoaccessunweightedtime=rhoaccessutimeres$allrho;rhoaccessunweightedtimemin=rhoaccessutimeres$rhominus;rhoaccessunweightedtimemax=rhoaccessutimeres$rhoplus
        tws=rhoaccessdevres$alltws;t0=rhoaccessdevres$allt0s;
        #
        summary(corrtrends(c(unlist(access)),c(unlist(dactives)),n=c(unlist(n))[1],b=b))
    """,libraries=Seq("segmented")) set (
      b := nReplications,
      resources += workDirectory / "analysis/corrs.R",
      rInputs += (b,"b"),
      rInputs += (nPatches.toArray,"n"),
      rInputs += (accessibilities.toArray,"access"),
      rInputs += (deltaActives.toArray,"dactives"),
      rInputs += (employments.toArray,"employments"),
      rInputs += (weightedTime.toArray,"weightedtime"),
      rInputs += (unweightedTime.toArray,"unweightedtime"),
      rOutputs += ("rhoaccessdev",corAccessDev),
      rOutputs += ("rhoaccessdevmin",corAccessDevMin),
      rOutputs += ("rhoaccessdevmax",corAccessDevMax),
      rOutputs += ("rhoaccessemp",corAccessEmployments),
      rOutputs += ("rhoaccessempmin",corAccessEmploymentsMin),
      rOutputs += ("rhoaccessempmax",corAccessEmploymentsMax),
      rOutputs += ("rhoaccessweightedtime",corAccessWeightedtime),
      rOutputs += ("rhoaccessweightedtimemin",corAccessWeightedtimeMin),
      rOutputs += ("rhoaccessweightedtimemax",corAccessWeightedtimeMax),
      rOutputs += ("rhoaccessunweightedtime",corAccessUnweightedtime),
      rOutputs += ("rhoaccessunweightedtimemin",corAccessUnweightedtimeMin),
      rOutputs += ("rhoaccessunweightedtimemax",corAccessUnweightedtimeMax),
      rOutputs += ("tws",tw),
      rOutputs += ("t0",t0),
      rInputs += (relocationRate.toArray,gammaCDA.toArray,gammaCDE.toArray,betaDC.toArray,lambdaAcc.toArray,networkSpeed.toArray,scenario.toArray,id.toArray),
      rOutputs += (relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,scenario,id)
    )


// get final correlations from all estimated correlations
/*
val getFinalCorrs = ScalaTask("""


      """
      ) set (
        inputs += (corAccessDev,corAccessEmployments,corrAccessWeightedtime,corAccessUnweightedtime)
        outputs += ()
      )
*/

//relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,scenario,replication,id
val exploration =
  DirectSampling(
<<<<<<< HEAD
    evaluation = (replications -- estimateCorrs) hook indics_hook,
=======
    evaluation = (replications -- estimateCorrs hook indics_hook),
>>>>>>> 416e8083ef72fc5ea8e17e6affcf2750c451eb44
    sampling =
    /*(((lambdaAcc in (0.002 to 0.01 by 0.002)) x
    (networkSpeed in (2.0 to 6.0 by 2.0)) x
    (gammaCDA in (0.1 to 1.0 by 0.1))x
    (gammaCDE in (0.1 to 1.0 by 0.1))x
    (betaDC in (0.5 to 2.0 by 0.5))x
    (relocationRate in (0.1 to 1.0 by 0.1))x
    (scenario in (0 to 5 by 1))
  ) withIndex id )*/
   ((LHS (
      //500
      1
      //,lambdaAcc in Range(0.001,0.01)
      //,networkSpeed in Range(2.5,10.0)
      ,gammaCDA in Range(0.5,1.0)
      ,gammaCDE in Range(0.5,1.0)
      ,betaDC in Range(0.5,2.0)
      ,relocationRate in Range(0.0,1.0)
    ) withIndex id) x (scenario in (0 to 7 by 1)) x (lambdaAcc is 0.005) x (networkSpeed is 5.0) )//,
    //aggregation = (flatten -- (estimateCorrs hook indics_hook))
    //aggregation = (estimateCorrs hook indics_hook)
  )


exploration
