
;;
; ghost network primitives




;;
;  create a virtual network for comparison
to network-ghost:ghost-network-from-gis [file]
  foreach gis:feature-list-of gis:load-dataset file [   
     feature ->
        foreach gis:vertex-lists-of feature [vertices ->
          let i 0 let l vertices
          foreach but-first vertices [ vertex ->
            let p1 gis:location-of item i l let p2 gis:location-of vertex
            ;output-print p1 output-print p2
            if p1 != [] and p2 != [] [
              set p1 ([list pxcor pycor] of patch first p1 last p1) set p2 ([list pxcor pycor] of patch first p2 last p2)
              if p1 != p2 [
                create-ghost-transportation-nodes 1 [
                  network:new-transportation-node setxy first p1 last p1
              hatch 1 [setxy first p2 last p2 create-ghost-transportation-link-with myself [set color red set thickness patch-size / 200]]
                ]
              ]
            ]
            set i i + 1
          ]
        
        ]
      ]
end


;;
; report a ghost network as the coordinates in a infra list
to-report network-ghost:ghost-network-as-infra-list 
  ifelse count ghost-transportation-nodes > 0 [
    let res []
    ask ghost-transportation-links [
      set res lput (list (list [xcor] of end1 [ycor] of end1) (list [xcor] of end2 [ycor] of end2)) res 
    ]
    report res
  ][report []]
end


;;
; remove a ghost network
to network-ghost:kill-ghost-network
  ask ghost-transportation-links [die]
  ask ghost-transportation-nodes [die]
end




