
;;
; specific indicators for stylized facts




;;
; 
to-report indicators-stylized:cor-access-dev-alltimes
  let x reduce [[?1 ?2] -> list:concatenate (list ?1 ?2)] indicators:ts-indicator "indicators:patches-accessibilities"
  let y reduce [[?1 ?2] -> list:concatenate (list ?1 ?2)] indicators:ts-indicator "indicators:patches-delta-actives"
  report list:pearson-correlation x y
end


;;
; correlation between accessibility and population growth estimated on patches
to-report indicators-stylized:cor-access-dev
  let x list:order-by-last-element ([(list patch:current-accessibility patch:number)] of patches)
  let y list:order-by-last-element ([(list patch:delta-actives patch:number)] of patches)
  report list:pearson-correlation x y
end

;;
; moving window average
to-report indicators-stylized:cor-access-dev-mw
  report indicators:causal-moving-average "indicators-stylized:cor-access-dev" 15 
end

to-report indicators-stylized:cor-access-dev-avg
  report indicators:time-average "indicators-stylized:cor-access-dev"
end



;;
; correlation between accessibility and employments estimated on patches
to-report indicators-stylized:cor-access-employments
  let x list:order-by-last-element ([(list patch:current-accessibility patch:number)] of patches)
  let y list:order-by-last-element ([(list patch:employments patch:number)] of patches)
  report list:pearson-correlation x y
end


to-report indicators-stylized:cor-access-employments-avg
  report indicators:time-average "indicators-stylized:cor-access-employments"
end




;;
; correlation between accessibility and average travel time
to-report indicators-stylized:cor-access-time [weighted?]
  let avgdist []
  ifelse not weighted? [
    ifelse not (global:effective-distance-matrix = 0) [set avgdist map mean matrix:to-row-list global:effective-distance-matrix][set avgdist list:rep 1 count patches]
  ][
    let atot sum [patch:actives] of patches let etot sum [patch:employments] of patches if atot = 0 [set atot 1] if etot = 0 [set etot 1]
    set avgdist list:order-by-last-element ([(list ((patch:a-to-e-distance + patch:e-to-a-distance) / (2 * (atot) * (etot))) patch:number)] of patches)
    if sum avgdist = 0 [set avgdist list:rep 1 count patches]
  ]
  let avgtime map [? -> indicators-stylized:avgtime ?] avgdist
  ;let sortaccess map [first ?] (sort-by [last ?1 < last ?2] ([(list patch:current-accessibility patch:number)] of patches))
  let sortaccess list:order-by-last-element ([(list patch:current-accessibility patch:number)] of patches)
  report list:pearson-correlation avgtime sortaccess
end

to-report indicators-stylized:avgtime [dist]
  ifelse dist = 0 [report 0][report global:network-speed / dist]
end


to-report indicators-stylized:cor-access-time-avg [weighted?]
  report indicators:time-average (word "indicators-stylized:cor-access-time " weighted?)
end

to-report indicators-stylized:cor-access-time-mw [weighted?]
  report indicators:causal-moving-average (word "indicators-stylized:cor-access-time " weighted?) 15 
end

