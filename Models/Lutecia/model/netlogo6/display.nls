
;;;;;;;;;;;;;;;;
;; display.nls
;;;;;;;;;;;;;;;;



; plot mean accessibility of external facility
; if external-facility != 0 [plot (mean [current-accessibility] of patches with [member? number external-facility]) / initial-max-acc]
; plot externality employments
; plot externality-employments


to display:update-display
  display:color-patches
  display:update-nw-display
  display:export-view
end


to display:display-target-fit
  set global:patches-display "accessibility"
  display:color-patches
  ask ghost-transportation-links [set color blue set thickness 0.2 ask both-ends [set color blue]]
end


to display:color-patches
  ; basic
  if global:patches-display = "governance"[
     ask patches [set pcolor [color] of patch:governing-mayor]
  ]
  if global:patches-display = "accessibility"[
     color-gradient-patches "(patch:a-to-e-accessibility + patch:e-to-a-accessibility)" "green" "linear"
  ]
  ; cor variables
  if member? global:patches-display ["patch:actives" "patch:employments" "a-utility" "e-utility" "a-to-e-accessibility" "e-to-a-accessibility"] [
     ;color-gradient-patches patches-display "green" "linear"
     run (word "let mi min [" global:patches-display "] of patches let ma max [" global:patches-display "] of patches let me (mi + ma)/ 2 ask patches [ ifelse " global:patches-display " < me [set pcolor palette:scale-gradient [[0 0 0] [0 255 0]] " global:patches-display " mi ma][set pcolor palette:scale-gradient [[0 255 0][255 0 0]] " global:patches-display " mi ma]]")
  ]
  ; distances
  if member? global:patches-display ["mean-effective-distance" "lbc-effective-distance" "center-effective-distance" "lbc-network-distance"] [
    let md []
    if global:patches-display = "mean-effective-distance" [set md map mean matrix:to-row-list global:effective-distance-matrix]
    if global:patches-display = "lbc-effective-distance" [set md matrix:get-column global:effective-distance-matrix 0]
    if global:patches-display = "center-effective-distance" [set md matrix:get-column global:effective-distance-matrix (floor (global:#-patches / 2))]
    if global:patches-display = "lbc-network-distance" [if length global:nw-patches > 0 [let lbcn [patch:number] of one-of (patches with [member? patch:number global:nw-patches]) with-min [[pxcor] of self + [pycor] of self] set md matrix:get-column global:network-distance-matrix lbcn ]]
    if length global:nw-patches > 0 or global:patches-display != "lbc-network-distance" [
    let ma max md let mi min md
    let p 0 foreach md [? -> ask patch-with-number p [set pcolor scale-color yellow ? mi ma] set p p + 1]
    ]
  ]
  ; transportation
  if global:patches-display = "congestion" [
    ask patches [
      ifelse member? self global:nw-patches [
        color-gradient-patches "item who patches-congestion" "red" "linear"
      ][
        set pcolor black
      ] 
    ] 
  ]
  
  if global:patches-display = "network" [
    ask patches [set pcolor black] ask patches with [member? patch:number global:nw-patches] [set pcolor pink] 
  ]
  
  ask patches with [patch:sea? = true] [set pcolor blue]
  
  
end




;;
; Update nw display, with link age coloring
to display:update-nw-display
  ask transportation-links [
    set thickness 0.4
    ;set color gradient:scale [[255 0 0] [255 255 0]] age 0 (ticks + 1) 
    set color palette:scale-gradient [[0 0 255] [255 0 255]] transportation-link:age 0 (ticks + 1)
    ask both-ends [set color [color] of myself]
  ]
end

;;
; optionally export world view
to display:export-view
  if global:export? [
    if global:export-view-prefix != 0 [
      if length global:export-view-prefix > 0 [
        export-view (word global:export-view-prefix "_seed" global:seed "_t" ticks ".png")
      ]
    ]
  ]
end



;;;;
; Draw boundary between regions
; it is drawn permanently
to display:draw-boundaries
  
  ;; dirty way : ask each patch to sprout someone drawing its border with neighbors of different area
  
  ask patches with [count neighbors4 with [[patch:governing-mayor] of myself != patch:governing-mayor] > 0] [
    let p self
    sprout 1 [
      set color pink set shape "circle" ;set size patch-size / 2
      foreach list:to-list [neighbors4 with [[patch:governing-mayor] of p != patch:governing-mayor]] of myself [
        ? -> 
          let xp [pxcor] of p let yp [pycor] of p let xn [pxcor] of ? let yn [pycor] of ?
          ifelse xp = xn [
            setxy xp - 0.499 (yp + yn) / 2 pen-down setxy xp + 0.499 (yp + yn) / 2 pen-up
          ][
            setxy (xp + xn) / 2  yp - 0.499 pen-down setxy (xp + xn) / 2  yp + 0.499 pen-up
          ]
      ]
      die 
    ]
  ]
  
end



;;
; specific setup for some plots
to display:setup-plots 
  carefully [
    set-current-plot "accessibility" set-plot-y-range precision (accessibilities:mean-accessibility patches - 0.001) 3 precision (accessibilities:mean-accessibility patches + 0.001) 3
    ;set-current-plot "mean-travel-distance" set-plot-y-range (mean-travel-distance - 0.001) (mean-travel-distance + 0.001)
  ][]
end






