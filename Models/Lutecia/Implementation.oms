
import java.util.Date
import java.text.SimpleDateFormat

logger.level("FINE")


// Parameters
val lambdaAcc = Val[Double]
val networkSpeed = Val[Double]
val gammaCDA=Val[Double]
val gammaCDE=Val[Double]
val betaDC=Val[Double]
val relocationRate=Val[Double]

val finalTime = Val[Double]
val worldSize = Val[Double]
val numberTerritories = Val[Double]

val id = Val[Int]
val replication = Val[Int]


// spatial configurations
val actives = Val[RasterLayer]
val employments = Val[RasterLayer]


// fixed parameters
val tf = 2
val ws = 15
val territs = 5


// reporters

// full trajectory of models

val activesTrajectoriesNL5 = Val[Array[RasterLayer]]
val activesTrajectoriesNL6 = Val[Array[RasterLayer]]
val activesTrajectoriesScala = Val[Array[RasterLayer]]

val employmentsTrajectoriesNL5 = Val[Array[RasterLayer]]
val employmentsTrajectoriesNL6 = Val[Array[RasterLayer]]
val employmentsTrajectoriesScala = Val[Array[RasterLayer]]


val distMatNL5 = Val[Array[Array[Array[Double]]]]
val distMatNL6 = Val[Array[Array[Array[Double]]]]
val distMatScala = Val[Array[Array[Array[Double]]]]

val accessibilitiesNL5 = Val[Array[RasterLayer]]
val accessibilitiesNL6 = Val[Array[RasterLayer]]
val accessibilitiesScala = Val[Array[RasterLayer]]

val aUtilitiesNL5 = Val[Array[RasterLayer]]
val aUtilitiesNL6 = Val[Array[RasterLayer]]
val aUtilitiesScala = Val[Array[RasterLayer]]

val eUtilitiesNL5 = Val[Array[RasterLayer]]
val eUtilitiesNL6 = Val[Array[RasterLayer]]
val eUtilitiesScala = Val[Array[RasterLayer]]


val avgstepdiffactives56 = Val[Array[Double]]
val avgstepdiffemployments56  = Val[Array[Double]]
val avgstepdiffdist56  = Val[Array[Double]]
val avgstepdiffaccess56  = Val[Array[Double]]
val avgstepdiffautility56  = Val[Array[Double]]
val avgstepdiffeutilty56  = Val[Array[Double]]
val stepdiffactives56  = Val[Array[Double]]
val stepdiffemployments56 = Val[Array[Double]]
val stepdiffdist56 = Val[Array[Double]]
val stepdiffaccess56 = Val[Array[Double]]
val stepdiffautility56 = Val[Array[Double]]
val stepdiffeutility56 = Val[Array[Double]]
val avgstepdiffactives6s = Val[Array[Double]]
val avgstepdiffemployments6s = Val[Array[Double]]
val avgstepdiffdist6s = Val[Array[Double]]
val avgstepdiffaccess6s = Val[Array[Double]]
val avgstepdiffautility6s = Val[Array[Double]]
val avgstepdiffeutilty6s = Val[Array[Double]]
val stepdiffactives6s = Val[Array[Double]]
val stepdiffemployments6s = Val[Array[Double]]
val stepdiffdist6s = Val[Array[Double]]
val stepdiffaccess6s = Val[Array[Double]]
val stepdiffautility6s = Val[Array[Double]]
val stepdiffeutility6s = Val[Array[Double]]


val timenl5 = Val[Long]
val timenl6 = Val[Long]
val timescala = Val[Long]

// NetLogo models

// experiments-luti:setup-experiment-luti [relocationRate gammaA gammaE betaDC lambdaacc nwspeed scenario finalTime worldSize rnd-seed]
val cmds = List(
  "experiments-luti:setup-experiment-luti ${relocationRate} ${gammaCDA} ${gammaCDE} ${betaDC} ${lambdaAcc} ${networkSpeed} -1 ${finalTime} ${worldSize} \"external\" ${replication}",
  "experiments-luti:run-experiment-luti"
)


val model5task = NetLogo5Task(workDirectory / "model/netlogo5/HEADLESS_Lutecia.nlogo",cmds,embedWorkspace=true) set(
  inputs += (relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,finalTime,worldSize,numberTerritories,replication,id),
  inputs += actives mapped "global:setup:actives",
  inputs += employments mapped "global:setup:employments",
  outputs += (actives,employments),
  outputs += (relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,finalTime,worldSize,numberTerritories,replication,id),
  outputs += activesTrajectoriesNL5 mapped "indicators:actives-raster-alltimes",
  outputs += employmentsTrajectoriesNL5 mapped "indicators:employments-raster-alltimes",
  outputs += distMatNL5 mapped "indicators:distance-matrix-alltimes true",
  outputs += accessibilitiesNL5 mapped "indicators:accessibilities-raster-alltimes",
  outputs += aUtilitiesNL5 mapped "indicators:a-utilities-raster-alltimes",
  outputs += eUtilitiesNL5 mapped "indicators:e-utilities-raster-alltimes"
)
//val model5 = Capsule(TimingTask(model5task,timenl5),strain = true)
val model5 = TimingTask(model5task,timenl5)

val model6task = NetLogo6Task(workDirectory / "model/netlogo6/HEADLESS_Lutecia.nlogo",cmds,embedWorkspace=true) set(
  inputs += actives mapped "global:setup:actives",
  inputs += employments mapped "global:setup:employments",
  inputs += timenl5,
  inputs += (actives,employments),
  outputs += (actives,employments),
  outputs += timenl5,
  inputs += (activesTrajectoriesNL5,employmentsTrajectoriesNL5,distMatNL5,accessibilitiesNL5,aUtilitiesNL5,eUtilitiesNL5),
  outputs += (relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,finalTime,worldSize,numberTerritories,replication,id),
  outputs += (activesTrajectoriesNL5,employmentsTrajectoriesNL5,distMatNL5,accessibilitiesNL5,aUtilitiesNL5,eUtilitiesNL5),
  outputs += activesTrajectoriesNL6 mapped "indicators:actives-raster-alltimes",
  outputs += employmentsTrajectoriesNL6 mapped "indicators:employments-raster-alltimes",
  outputs += distMatNL6 mapped "indicators:distance-matrix-alltimes true",
  outputs += accessibilitiesNL6 mapped "indicators:accessibilities-raster-alltimes",
  outputs += aUtilitiesNL6 mapped "indicators:a-utilities-raster-alltimes",
  outputs += eUtilitiesNL6 mapped "indicators:e-utilities-raster-alltimes"
)
//val model6 = Capsule(TimingTask(model6task,timenl6),strain = true)
val model6 = TimingTask(model6task,timenl6)



val modelscalatask = ScalaTask("""
    |import lutecia._
    |import lutecia.setup._
    |import lutecia.network._
    |import lutecia.indicators._
    |
    |val model = new Lutecia with SyntheticSetup 
    |   //with ExponentialMixtureGrid
    |   with ExternalGrid
    |   with GridNetwork {
    |  
    |  override def worldSize = input.worldSize.toInt
    |  override def finalTime: Int = input.finalTime.toInt
    |  override def numberTerritories: Int = input.numberTerritories.toInt
    |  override def lambda: Double = input.lambdaAcc
    |  override def beta: Double = input.betaDC
    |  override def alpha: Double = input.relocationRate
    |  override def gammaA: Double = input.gammaCDA
    |  override def gammaE: Double = input.gammaCDE
    |  override def euclidianPace: Double = input.networkSpeed
    |  
    |  override def actives = input.actives
    |  override def employments= input.employments
    |}
    |
    |val result = RunModel.run(model)
    |
    |val activesTrajectoriesScala = Result.getActivesTrajectories(result).toArray
    |val employmentsTrajectoriesScala = Result.getEmploymentsTrajectories(result).toArray
    |//val distMatScala = Result.getDistanceMatrices(result).toArray
    |val distMatScala = Result.getDistanceMaps(result).toArray
    |val accessibilitiesScala = Result.getAccessibilities(result).toArray
    |val aUtilitiesScala = Result.getTrajectories(result,_.aUtility).toArray
    |val eUtilitiesScala = Result.getTrajectories(result,_.eUtility).toArray
    |""".stripMargin
) set (
   plugins += pluginsOf(lutecia.Lutecia),
   inputs += (relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,finalTime,worldSize,numberTerritories,replication,id),
   inputs += (activesTrajectoriesNL6,employmentsTrajectoriesNL6,distMatNL6,accessibilitiesNL6,aUtilitiesNL6,eUtilitiesNL6),
   inputs += (activesTrajectoriesNL5,employmentsTrajectoriesNL5,distMatNL5,accessibilitiesNL5,aUtilitiesNL5,eUtilitiesNL5),
   inputs += (timenl5,timenl6),
   inputs += (actives,employments),
   outputs += (timenl5,timenl6),
   outputs += (relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,finalTime,worldSize,numberTerritories,replication,id),
   outputs += (activesTrajectoriesNL6,employmentsTrajectoriesNL6,distMatNL6,accessibilitiesNL6,aUtilitiesNL6,eUtilitiesNL6),
   outputs += (activesTrajectoriesNL5,employmentsTrajectoriesNL5,distMatNL5,accessibilitiesNL5,aUtilitiesNL5,eUtilitiesNL5),
   outputs += (activesTrajectoriesScala,employmentsTrajectoriesScala,distMatScala,accessibilitiesScala,aUtilitiesScala,eUtilitiesScala)
)
val modelscala = TimingTask(modelscalatask,timescala)

val comparisontask = ScalaTask("""
  |def stepdiff(a1: Array[Array[Array[Double]]],a2: Array[Array[Array[Double]]]) : Array[Double] = a1.zip(a2).map{
  |     case (r1,r2) => {r1.flatten.toSeq.zip(r2.flatten.toSeq).map{case (x1,x2) => if(x1 + x2 > 0){200 * math.abs(x1 - x2) / (x1 + x2)}else{0.0}}.sum / r1.flatten.length}
  |  }
  |
  |def avgstepdiff(a1: Array[Array[Array[Double]]],a2: Array[Array[Array[Double]]]): Array[Double] = a1.zip(a2).map{
  |   case (r1,r2) => 200 * r1.flatten.toSeq.zip(r2.flatten.toSeq).map{case (x1,x2) => math.abs(x1 - x2)}.sum / (r1.flatten.sum + r2.flatten.sum)
  |}
  |
  |def stepdiffMap(a1: Array[Array[Array[Double]]],a2: Array[Array[Array[Double]]]) : Array[Double] = a1.zip(a2).map{
  |     case (m1,m2) => {
  |        val map1 = m1.map{case Array(i,j,d) => ((i.toInt,j.toInt),d)}.toMap
  |        val map2 = m2.map{case Array(i,j,d) => ((i.toInt,j.toInt),d)}.toMap
  |        map1.keySet.map{case key => if (map1(key)+map2(key)> 0) 200 * math.abs(map1(key) - map2(key)) / (map1(key)+map2(key)) else 0.0}.sum / map1.size
  |     }
  |  }
  | def avgstepdiffMap(a1: Array[Array[Array[Double]]],a2: Array[Array[Array[Double]]]) : Array[Double] = a1.zip(a2).map{
  |     case (m1,m2) => {
  |        val map1 = m1.map{case Array(i,j,d) => ((i.toInt,j.toInt),d)}.toMap
  |        val map2 = m2.map{case Array(i,j,d) => ((i.toInt,j.toInt),d)}.toMap
  |        map1.keySet.map{case key => 200 * math.abs(map1(key) - map2(key))}.sum / (map1.values.sum + map2.values.sum)
  |     }
  |  }
  |
  |
  |// avgstepdiff 5 - 6
  |val avgstepdiffactives56 = avgstepdiff(activesTrajectoriesNL5,activesTrajectoriesNL6)
  |val avgstepdiffemployments56 = avgstepdiff(employmentsTrajectoriesNL5,employmentsTrajectoriesNL6)
  |val avgstepdiffdist56 = avgstepdiffMap(distMatNL5,distMatNL6)
  |val avgstepdiffaccess56 = avgstepdiff(accessibilitiesNL5,accessibilitiesNL6)
  |val avgstepdiffautility56 = avgstepdiff(aUtilitiesNL5,aUtilitiesNL6)  
  |val avgstepdiffeutilty56 = avgstepdiff(eUtilitiesNL5,eUtilitiesNL6)  
  |
  |// stepdiff 5 - 6
  |val stepdiffactives56 = stepdiff(activesTrajectoriesNL5,activesTrajectoriesNL6)
  |val stepdiffemployments56 = stepdiff(employmentsTrajectoriesNL5,employmentsTrajectoriesNL6)
  |val stepdiffdist56 = stepdiffMap(distMatNL5,distMatNL6)
  |val stepdiffaccess56 = stepdiff(accessibilitiesNL5,accessibilitiesNL6)
  |val stepdiffautility56 = stepdiff(aUtilitiesNL5,aUtilitiesNL6)  
  |val stepdiffeutility56 = stepdiff(eUtilitiesNL5,eUtilitiesNL6)  
  |
  |// avgstepdiff 6 - scala
  |val avgstepdiffactives6s = avgstepdiff(activesTrajectoriesNL6,activesTrajectoriesScala)
  |val avgstepdiffemployments6s = avgstepdiff(employmentsTrajectoriesNL6,employmentsTrajectoriesScala)
  |val avgstepdiffdist6s = avgstepdiffMap(distMatNL6,distMatScala)
  |val avgstepdiffaccess6s = avgstepdiff(accessibilitiesNL6,accessibilitiesScala)
  |val avgstepdiffautility6s = avgstepdiff(aUtilitiesNL6,aUtilitiesScala)  
  |val avgstepdiffeutilty6s = avgstepdiff(eUtilitiesNL6,eUtilitiesScala)
  |
  |// stepdiff 6 - scala
  |val stepdiffactives6s = stepdiff(activesTrajectoriesNL6,activesTrajectoriesScala)
  |val stepdiffemployments6s = stepdiff(employmentsTrajectoriesNL6,employmentsTrajectoriesScala)
  |val stepdiffdist6s = stepdiffMap(distMatNL6,distMatScala)
  |val stepdiffaccess6s = stepdiff(accessibilitiesNL6,accessibilitiesScala)
  |val stepdiffautility6s = stepdiff(aUtilitiesNL6,aUtilitiesScala)  
  |val stepdiffeutility6s = stepdiff(eUtilitiesNL6,eUtilitiesScala)
""".stripMargin
) set (
  inputs += (relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,finalTime,worldSize,numberTerritories,replication,id),
  inputs += (activesTrajectoriesNL6,employmentsTrajectoriesNL6,distMatNL6,accessibilitiesNL6,aUtilitiesNL6,eUtilitiesNL6),
  inputs += (activesTrajectoriesNL5,employmentsTrajectoriesNL5,distMatNL5,accessibilitiesNL5,aUtilitiesNL5,eUtilitiesNL5),
  inputs += (activesTrajectoriesScala,employmentsTrajectoriesScala,distMatScala,accessibilitiesScala,aUtilitiesScala,eUtilitiesScala),
  inputs += (timenl5,timenl6,timescala),
  outputs += (timenl5,timenl6,timescala),
  outputs += (relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,finalTime,worldSize,numberTerritories,replication,id),
  outputs += (avgstepdiffactives56,avgstepdiffemployments56,avgstepdiffaccess56,avgstepdiffautility56,avgstepdiffeutilty56),
  outputs += (stepdiffactives56,stepdiffemployments56,stepdiffaccess56,stepdiffautility56,stepdiffeutility56),
  outputs += (avgstepdiffactives6s,avgstepdiffemployments6s,avgstepdiffaccess6s,avgstepdiffautility6s,avgstepdiffeutilty6s),
  outputs += (stepdiffactives6s,stepdiffemployments6s,stepdiffaccess6s,stepdiffautility6s,stepdiffeutility6s),
  outputs += (avgstepdiffdist56,stepdiffdist56,avgstepdiffdist6s,stepdiffdist6s)
)
// note : must add explicitely outputs, straining seems not compatible with the MoleTask ?
//val comparison = Capsule(comparisontask,strain=true)

val task = MoleTask(model5 -- model6 -- modelscala -- comparisontask)

//val parameters = Seq(relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,finalTime,worldSize,numberTerritories,replication,id)
//val indicators = Seq(avgstepdiffactives56,avgstepdiffemployments56,avgstepdiffdist56,avgstepdiffaccess56,avgstepdiffautility56,avgstepdiffeutilty56)

val purpose = "IMPLEMENTATION_TEST"
//val purpose = "IMPLEMENTATION"

// note : CSVHook does not accept seq of vals ?
val indics_hook = AppendToCSVFileHook(workDirectory / "exploration" / ((new SimpleDateFormat("yyyyMMdd_HHmmss")).format(new Date()))+"_"+purpose+".csv",
  relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,finalTime,worldSize,numberTerritories,replication,id,
  avgstepdiffactives56,avgstepdiffemployments56,
  avgstepdiffaccess56,avgstepdiffautility56,avgstepdiffeutilty56,
  stepdiffactives56,stepdiffemployments56,
  stepdiffaccess56,stepdiffautility56,stepdiffeutility56,
  avgstepdiffactives6s,avgstepdiffemployments6s,avgstepdiffaccess6s,avgstepdiffautility6s,avgstepdiffeutilty6s,
  stepdiffactives6s,stepdiffemployments6s,stepdiffaccess6s,stepdiffautility6s,stepdiffeutility6s,
  avgstepdiffdist56,stepdiffdist56,avgstepdiffdist6s,stepdiffdist6s,
  timenl5,timenl6,timescala
) set (arraysOnSingleRow := true)

val local = LocalEnvironment(10)
//val grid = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 4000 megabytes)



//relocationRate,gammaCDA,gammaCDE,betaDC,lambdaAcc,networkSpeed,finalTime,worldSize,numberTerritories,replication,id
val exploration =
  DirectSampling(
    //evaluation = (task on grid by 50 hook indics_hook) ,
    evaluation = (task on local hook indics_hook) ,
    sampling =
   ((LHS (
      1
      ,lambdaAcc in Range(0.001,0.01)
      ,networkSpeed in Range(2.5,10.0)
      ,gammaCDA in Range(0.5,1.0)
      ,gammaCDE in Range(0.5,1.0)
      ,betaDC in Range(0.5,2.0)
      ,relocationRate in Range(0.0,0.2)
    ) withIndex id) x
    (finalTime is tf) x 
    (worldSize is ws) x
    (numberTerritories is territs) x
    (ExponentialMixtureSpatialSampling(
        gridSize = Left(ws),
        centersNumber = territs,
        maxValue = Left(500.0),
        kernelRadius = Right(Seq(1.0,0.8)),
        samples = 10,
        prototypes = Seq(actives,employments)
    ) withIndex replication ) 
   )
  )


exploration
